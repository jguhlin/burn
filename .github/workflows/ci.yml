# Entry point for the CI pipeline
name: ci

on:
  push:
    branches:
      - main
    paths:
      - 'Cargo.lock'
      - '**.rs'
      - '**.sh'
      - '**.ps1'
      - '**.yml'
      - '**.toml'
      - '!**.md'
      - '!LICENSE-APACHE'
      - '!LICENSE-MIT'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'Cargo.lock'
      - '**.rs'
      - '**.sh'
      - '**.ps1'
      - '**.yml'
      - '**.toml'
      - '!**.md'
      - '!LICENSE-APACHE'
      - '!LICENSE-MIT'

env:
  # Note: It is not possible to define env vars in composite actions.
  # To work around this issue we use inputs and define all the env vars here.

  # Cargo
  CARGO_TERM_COLOR: "always"
  CARGO_INCREMENTAL: "0"

  # Dependency versioning
  # from wgpu repo: https://github.com/gfx-rs/wgpu/blob/trunk/.github/workflows/ci.yml
  #
  # Sourced from https://vulkan.lunarg.com/sdk/home#linux
  VULKAN_SDK_VERSION: "1.3.268"
  # Sourced from https://archive.mesa3d.org/. Bumping this requires
  # updating the mesa build in https://github.com/gfx-rs/ci-build and creating a new release.
  MESA_VERSION: "23.3.1"
  # Corresponds to https://github.com/gfx-rs/ci-build/releases
  MESA_CI_BINARY_BUILD: "build18"
  # Sourced from https://www.nuget.org/packages/Microsoft.Direct3D.WARP
  WARP_VERSION: "1.0.8"
  # Mozilla Grcov
  GRCOV_LINK: "https://github.com/mozilla/grcov/releases/download"
  GRCOV_VERSION: "0.8.19"
  # Typos version
  TYPOS_LINK: "https://github.com/crate-ci/typos/releases/download"
  TYPOS_VERSION: "1.23.4"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checks:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        rust: [stable]
        include:
          - rust: stable
            cache-version: stable
    steps:
      - name: Checkout actions
        uses: actions/checkout@v3
      # --------------------------------------------------------------------------------
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          rust-toolchain: ${{ matrix.rust }}
          cache-key: ${{ matrix.cache-version }}-linux
      # --------------------------------------------------------------------------------
      - name: Install typos
        shell: bash
        run: |
          curl -L "$TYPOS_LINK/v$TYPOS_VERSION/typos-v$TYPOS_VERSION-x86_64-unknown-linux-musl.tar.gz" |
          tar xz -C $HOME/.cargo/bin
      # --------------------------------------------------------------------------------
      # TODO Disable for now, will fix later after the refactor is merged
      # - name: Audit
      #   shell: bash
      #   run: cargo xtask ci audit
      # --------------------------------------------------------------------------------
      - name: Format
        shell: bash
        run: cargo xtask ci format
      # --------------------------------------------------------------------------------
      - name: Lint
        shell: bash
        run: cargo xtask ci lint
      # --------------------------------------------------------------------------------
      - name: Typos
        shell: bash
        run: cargo xtask ci typos

  documentation:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        rust: [stable]
        include:
          - rust: stable
            cache-version: stable
    steps:
      - name: Checkout actions
        uses: actions/checkout@v3
      # --------------------------------------------------------------------------------
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          rust-toolchain: ${{ matrix.rust }}
          cache-key: ${{ matrix.cache-version }}-linux
      # --------------------------------------------------------------------------------
      - name: Tests
        shell: bash
        run: cargo xtask ci doc-tests

  tests-linux-std:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        rust: [stable, 1.79.0]
        include:
          - rust: stable
            cache-version: stable
          - rust: 1.79.0
            cache-version: 1-79-0
    steps:
      - name: Checkout actions
        uses: actions/checkout@v3
      # --------------------------------------------------------------------------------
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          rust-toolchain: ${{ matrix.rust }}
          cache-key: ${{ matrix.cache-version }}-linux
      # --------------------------------------------------------------------------------
      - name: Setup Linux runner
        uses: ./.github/actions/setup-linux
        with:
          vulkan-sdk-version: ${{ env.VULKAN_SDK_VERSION }}
          mesa-version: ${{ env.MESA_VERSION }}
          mesa-ci-build-version: ${{ env.MESA_CI_BINARY_BUILD }}
      # --------------------------------------------------------------------------------
      - name: Install grcov
        shell: bash
        run: |
          curl -L "$GRCOV_LINK/v$GRCOV_VERSION/grcov-x86_64-unknown-linux-musl.tar.bz2" |
          tar xj -C $HOME/.cargo/bin
      # --------------------------------------------------------------------------------
      - name: Build
        shell: bash
        run: cargo xtask --enable-coverage ci build
      # --------------------------------------------------------------------------------
      - name: Unit Tests
        shell: bash
        run: cargo xtask --enable-coverage ci unit-tests
      # --------------------------------------------------------------------------------
      - name: Integration Tests
        shell: bash
        run: cargo xtask --enable-coverage ci integration-tests
      # --------------------------------------------------------------------------------
      - name: Generate lcov.info
        shell: bash
        # /* is to exclude std library code coverage from analysis
        run: cargo xtask coverage generate --ignore "/*,xtask/*,examples/*"
      # --------------------------------------------------------------------------------
      - name: Codecov upload lcov.info
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}

  tests-linux-no-std:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        rust: [stable, 1.79.0]
        include:
          - rust: stable
            cache-version: stable
          - rust: 1.79.0
            cache-version: 1-79-0
    steps:
      - name: Checkout actions
        uses: actions/checkout@v3
      # --------------------------------------------------------------------------------
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          rust-toolchain: ${{ matrix.rust }}
          cache-key: ${{ matrix.cache-version }}-linux-no-std
      # --------------------------------------------------------------------------------
      - name: Setup Linux runner
        uses: ./.github/actions/setup-linux
        with:
          vulkan-sdk-version: ${{ env.VULKAN_SDK_VERSION }}
          mesa-version: ${{ env.MESA_VERSION }}
          mesa-ci-build-version: ${{ env.MESA_CI_BINARY_BUILD }}
      # --------------------------------------------------------------------------------
      - name: Crates Build
        shell: bash
        run: cargo xtask --execution-environment no-std ci build
      # --------------------------------------------------------------------------------
      - name: Crates Unit Tests
        shell: bash
        run: cargo xtask --execution-environment no-std ci unit-tests
